Day-6
problem -1

question : detect  a cycle in the linked list 
link :https://leetcode.com/problems/linked-list-cycle/description/

solution - java :
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
            ListNode fast = head;
            ListNode slow = head;
            while(fast!=null && fast.next!=null){
                fast = fast.next.next;
                slow = slow.next;

                if(fast == slow){
                    return true;
                }    
            }
        return false;
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

problem -2

question : palindrome in the linkedlist
link : https://leetcode.com/problems/palindrome-linked-list
solution - java:
class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode slow = head, fast = head, prev, temp;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        prev = slow;
        slow = slow.next;
        prev.next = null;
        while (slow != null) {
            temp = slow.next;
            slow.next = prev;
            prev = slow;
            slow = temp;
        }
        fast = head;
        slow = prev;
        while (slow != null) {
            if (fast.val != slow.val) return false;
            fast = fast.next;
            slow = slow.next;
        }
        return true;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem -3
question:find the node that cycle start
link:https://leetcode.com/problems/linked-list-cycle-ii/description/
solution - java :
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        ListNode temp = head;
        int count=0;

        while(fast!=null && fast.next!=null){
            fast = fast.next.next;
            slow = slow.next;
            if(fast == slow){
                while(temp!=slow){
                    slow=slow.next;
                    temp=temp.next;
                    count++;
                }
                return temp;
            }
        }
        
        return null;
        
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

problem -4

question :rotate the linked list
link : https://leetcode.com/problems/rotate-list/description/
solution - java:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        ListNode cur = head;
        if(head==null){
            return null;
        }
        int count =0;
        while(cur!=null){
            count++;
            cur = cur.next;
        }

        cur = head;
        ListNode prev = null;
        int val = k % count;
        if(val==0){
            return head;
        }
        count = count - val;
        int count1=1;
        while(count1<=count ){
            count1++;
            prev = cur;
            cur = cur.next;
        }

        prev.next = null;

        ListNode head1 = cur;
        while(cur.next != null){
            cur = cur.next;
        }

        cur.next =head;


        return head1;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------------------------------------------
